struct peaqc_vars {
    double FS;  /* Sampling frequency (double) */
    int NF;  /* Frame length */
    int CB_ADV;  /* Frame advance */
    int FB_ADV;  /* Sub-sampling factor in filter bank */
    double FCS;  /* Test sine frequency */
    double AMAX;  /* Max. input level corresponding to the max. listening level */
    int NL;  /* Number of correlation lags (EHS MOV) */
    int MAXNC;  /* Maximum number of channels */
    int NMOV_MAX;
};

void peaqc_getvars(struct peaqc_vars *vars);

/* PEAQ options */
struct PQ_Opt {
  double Lp;			/* Maximum listening level (dB SPL) */
  int Ni;			/* Print every NI'th PEAQ frame */
  int ClipMOV;			/* MOV clipping flag */
  double PCinit;		/* Initial value for pattern corrections */
  double PDfactor;		/* Forgetting factor for prob. detection */
  int OverlapDelay;		/* Overlap warmup frames and delay */
  int DataBounds;		/* Find data boundaries */
  int EndMin;			/* Min. number of samples in last PEAQ frame */
};

void peaqc_defaultopt(struct PQ_Opt *opt);

struct peaqc_result {
    ...;
    double DI;
    double ODG;
};

// peaqc_eval will assume sufficient zero-padding and will not do any bounds-checking!
void peaqc_eval(struct peaqc_result *results, const double *xr, const double *xt, size_t nsamp, struct PQ_Opt *opt);

// peaqc_eval_safe does not assume zero-padding and will do its own padding
void peaqc_eval_safe(struct peaqc_result *results, const double *xr, const double *xt, size_t nsamp, struct PQ_Opt *opt);
